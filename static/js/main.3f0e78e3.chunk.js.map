{"version":3,"sources":["redux/actions/idsActions.js","redux/actions/cryptocurrenciesActions.js","components/controls/CryptoTable/CryptoTableHeader.js","components/components/MarketChange.js","functions/Formatters.js","components/controls/CryptoTable/CryptoTableRow.js","components/controls/LoadingSpinner.js","components/components/Table/index.js","components/controls/CryptoTable/index.js","components/components/BackButton.js","components/components/CurrencySelect.js","components/components/Header/index.js","components/components/LastUpdated.js","components/components/PageContentWrapper.js","components/pages/DashboardPage.js","components/components/Statistics/StatisticList.js","components/components/Statistics/Statistic.js","components/components/Rank.js","components/pages/CurrencyProfilePage.js","GlobalStyle.js","App.js","redux/reducers/cryptocurrencies.js","redux/reducers/ids.js","redux/reducers/index.js","redux/sagas/index.js","redux/store.js","index.js","resources/svg/puff.svg"],"names":["clearRefreshInterval","type","FETCH_CRYPTOCURRENCIES","FETCH_CRYPTOCURRENCIES_COMPLETE","CHANGE_CURRENCY","CryptoTableHeader","react_default","a","createElement","styled","_ref","value","className","valueParsed","parseFloat","symbol","_templateObject","props","currencyData","name","formatCurrency","decimalPlaces","arguments","length","undefined","currency","find","o","getSymbolForCurrency","toUpperCase","formattedNumber","formatNumber","concat","forStartOffset","toFixed","includes","i","slice","CryptoTableRow","_ref2","price","marketCap","change24h","Link","to","components_MarketChange","CryptoTableBody","data","currencyLowerCase","toLowerCase","map","row","CryptoTableRow_CryptoTableRow","key","percent","percent_change_24h","LoadingSpinner","src","spinner","alt","table","Table_templateObject","CryptoTable","loading","lastUpdated","controls_LoadingSpinner","Table","CryptoTable_CryptoTableHeader","CryptoTable_CryptoTableRow","BackButton","lib_default","icon","color","fontSize","Dropdown","select","CurrencySelect_templateObject","connect","state","cryptocurrencies","dispatch","onChangeCurrency","newCurrency","defaultValue","onChange","e","target","HeaderContainer","div","Header_templateObject","Header","backButton","children","components_BackButton","components_CurrencySelect","LastUpdated_templateObject","PageContentWrapper_templateObject","Fragment","components_Header","LastUpdated","PageContentWrapper","controls_CryptoTable","StatisticList_templateObject","Statistic_templateObject","Rank_templateObject","GridLayout","CurrencyProfilePage_templateObject","LeftColumn","_templateObject2","RightColumn","_templateObject3","ownProps","nameFromParams","match","params","found","rank","circulatingSupply","available_supply","volume24h","totalSupply","total_supply","console","log","components_Rank","StatisticList","Statistics_Statistic","createGlobalStyle","GlobalStyle_templateObject","App","_this$props","this","intervalId","onFetchCryptocurrencies","onRegisterRefreshInterval","setInterval","clearInterval","GlobalStyle","BrowserRouter","basename","process","Switch","Route","exact","path","component","DashboardPage","CurrencyProfilePage","Component","registerRefreshInterval","onClearRefreshInterval","defaultState","action","Object","objectSpread","result","ids","combineReducers","fetchCryptocurrencies","fetchCryptoCurrencyWatcher","changeCurrencyWatcher","rootSaga","getCurrency","url","regenerator_default","wrap","_context","prev","next","sent","axios","get","then","response","Date","put","stop","_marked","_context2","takeLatest","_marked2","_context3","_marked3","_context4","all","_marked4","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","es","src_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3f0e78e3.chunk.js","sourcesContent":["export const REGISTER_REFRESH_INTERVAL = 'REGISTER_REFRESH_INTERVAL';\r\nexport const CLEAR_REFRESH_INTERVAL = 'CLEAR_REFRESH_INTERVAL';\r\n\r\nexport const registerRefreshInterval = (intervalId) => ({\r\n    type: REGISTER_REFRESH_INTERVAL,\r\n    intervalId\r\n});\r\n\r\nexport const clearRefreshInterval = () => ({\r\n    type: CLEAR_REFRESH_INTERVAL,\r\n});\r\n\r\n","export const FETCH_CRYPTOCURRENCIES = 'FETCH_CRYPTOCURRENCIES';\r\nexport const FETCH_CRYPTOCURRENCIES_COMPLETE = 'FETCH_CRYPTOCURRENCIES_COMPLETE';\r\nexport const CHANGE_CURRENCY = 'CHANGE_CURRENCY';\r\n\r\nexport const fetchCryptocurrencies = () => ({\r\n    type: FETCH_CRYPTOCURRENCIES\r\n});\r\n\r\nexport const changeCurrency = (newCurrency) => ({\r\n    type: CHANGE_CURRENCY,\r\n    newCurrency\r\n});\r\n","import React from 'react';\r\n\r\n/**\r\n * Presentational component for header items of CryptoTable\r\n */\r\nconst CryptoTableHeader = () => (\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                Cryptocurrency\r\n            </th>\r\n            <th>\r\n                Price\r\n            </th>\r\n            <th>\r\n                Market Cap\r\n            </th>\r\n            <th>\r\n                24h Change\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nexport default CryptoTableHeader;","import styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst MarketChange = ({value, className}) => {\r\n    const valueParsed = parseFloat(value);\r\n    const symbol = valueParsed === 0 ? '' : (valueParsed < 0 ? '▼' : '▲');\r\n    return (\r\n        <span className={className}>{value}%{symbol}</span>\r\n    );\r\n};\r\n\r\nexport default styled(MarketChange)`\r\n    color: ${props => {\r\n        const value = parseFloat(props.value);\r\n        if (value === 0) return 'steelblue';\r\n        return (props.value < 0 ? 'red' : 'lightgreen');\r\n    }};\r\n`;\r\n","/**\r\n * Functions for formatting numbers for display\r\n */\r\n\r\nconst currencyData = [\r\n    {name: 'USD', symbol: '$'},\r\n    {name: 'GBP', symbol: '£'},\r\n    {name: 'EUR', symbol: '€'},\r\n    {name: 'JPY', symbol: '¥'},\r\n    {name: 'KRW', symbol: '₩'},\r\n]\r\n\r\nconst getSymbolForCurrency = (currency) => {\r\n    return currencyData.find(o => o.name === currency).symbol\r\n}\r\n\r\nexport const formatCurrency = (value, decimalPlaces = 2, currency = 'USD') => {\r\n    let symbol = getSymbolForCurrency(currency.toUpperCase());\r\n    let formattedNumber = formatNumber(value, decimalPlaces);\r\n    return `${symbol} ${formattedNumber}`;\r\n}\r\n\r\nexport const formatNumber = (value, decimalPlaces = 0) => {\r\n    if (!value) return null;\r\n    \r\n    value = parseFloat(value).toFixed(decimalPlaces);\r\n\r\n    // Add commas every three places, starting at the end of the non-decimal places\r\n    let forStartOffset = value.includes('.') ? -3 : 0;\r\n    for (let i = value.length - 3 + forStartOffset; i > 0; i -= 3)\r\n    {\r\n        value = value.slice(0, i) + ',' + value.slice(i);\r\n    }\r\n    return value;\r\n}\r\n\r\nexport const formatPercent = (percent) => (\r\n    parseFloat(percent).toFixed(2)\r\n)\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport MarketChange from '../../components/MarketChange';\r\n\r\nimport {\r\n    formatCurrency,\r\n    formatPercent\r\n} from '../../../functions/Formatters';\r\n\r\n\r\nconst CryptoTableBody = ({currency, data}) => {\r\n    if (!data) return null;\r\n    \r\n    const currencyLowerCase = currency.toLowerCase();\r\n    \r\n    return (\r\n        <tbody>\r\n            {\r\n                data.map(row =>\r\n                    (\r\n                        /** Currency property keys from the API are named with their currency format.\r\n                            \r\n                            The data should be formatted by the reducer to remove the currency name from\r\n                            the key and thus simplify whenever they are accessed.\r\n\r\n                            In the interest of time, though, they are accessed directly with selectors here.\r\n                        */\r\n                        <CryptoTableRow\r\n                            key={row.name}\r\n                            name={row.name}\r\n                            price={formatCurrency(row[`price_${currencyLowerCase}`], 2, currency)}\r\n                            marketCap={formatCurrency(row[`market_cap_${currencyLowerCase}`], 0, currency)}\r\n                            change24h={formatPercent(row.percent_change_24h)}\r\n                            />\r\n                    )\r\n                )\r\n            }\r\n        </tbody>\r\n    )\r\n};\r\n\r\nconst CryptoTableRow = ({name, price, marketCap, change24h}) => (\r\n    <tr>\r\n        <th>\r\n            <Link to={`/${name}`}>{name}</Link>\r\n        </th>\r\n        <th>{price}</th>\r\n        <th>{marketCap}</th>\r\n        <th>\r\n            <MarketChange value={change24h} />\r\n        </th>\r\n    </tr>\r\n);\r\n\r\nexport default CryptoTableBody;","import React from 'react';\r\nimport spinner from '../../resources/svg/puff.svg';\r\n\r\nconst LoadingSpinner = () => (\r\n    <img src={spinner} alt='Loading...' />\r\n);\r\n\r\nexport default LoadingSpinner;","import styled from 'styled-components';\r\n\r\nexport default styled.table`\r\n    margin-top: 1rem;\r\n    border: none;\r\n    border-collapse: collapse;\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #393d4e;\r\n    };\r\n    tbody > tr:nth-of-type(even) {\r\n        background-color: #303343;\r\n    };\r\n    tbody > tr:hover {\r\n        background-color: #434757;\r\n    };\r\n    th {\r\n        padding: 0.75em 2em;\r\n    }\r\n    thead {\r\n        text-transform: uppercase;\r\n        font-style: italic;\r\n        color: #797e8c;\r\n        background-color: #232335;\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\nimport CryptoTableHeader from './CryptoTableHeader';\r\nimport CryptoTableBody from './CryptoTableRow';\r\nimport LoadingSpinner from '../LoadingSpinner';\r\n\r\nimport Table from '../../components/Table/';\r\n\r\n/**\r\n * Displays a table of cryptocurrency data\r\n */\r\nconst CryptoTable = ({loading, lastUpdated, currency, data}) => {\r\n    if (loading) {\r\n        return <LoadingSpinner />\r\n    }\r\n    return (\r\n        <Table>\r\n            <CryptoTableHeader />\r\n            <CryptoTableBody currency={currency} data={data} />\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default CryptoTable;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Ionicon from 'react-ionicons';\r\n\r\nconst BackButton = () => (\r\n    <Link to='/'>\r\n        <Ionicon icon='md-arrow-back' color='#e7e9ec' fontSize='1.5em' />\r\n    </Link>\r\n)\r\n\r\nexport default BackButton;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    changeCurrency\r\n} from '../../redux/actions/cryptocurrenciesActions';\r\n\r\nconst Dropdown = styled.select`\r\n    background: #33344A;\r\n    color: #e7e9ec;\r\n    font-size: 1em;\r\n    padding: 0.35em;\r\n    border: 0;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currency: state.cryptocurrencies.currency\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n        onChangeCurrency:\r\n            (to)=>dispatch(changeCurrency(to))\r\n    }\r\n};\r\n\r\n/**\r\n * Dropdown box for changing currency\r\n */\r\nconst CurrencySelect = ({currency, onChangeCurrency}) => (\r\n    <Dropdown defaultValue={currency} onChange={(e) => onChangeCurrency(e.target.value)}>\r\n        <option value=\"USD\">USD</option>\r\n        <option value=\"GBP\">GBP</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"JPY\">JPY</option>\r\n        <option value=\"KRW\">KRW</option>\r\n    </Dropdown>\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencySelect);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport BackButton from '../BackButton'\r\nimport CurrencySelect from '../CurrencySelect';\r\n\r\nconst HeaderContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-direction: row;\r\n    text-align: center;\r\n    width: 100%;\r\n    div {\r\n        padding: 2em;\r\n        h1 {\r\n            margin: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Header = ({backButton, children}) => (\r\n    <HeaderContainer>\r\n        <div>\r\n            {\r\n                backButton ? <BackButton /> : null\r\n            }\r\n        </div>\r\n        <div>\r\n            <h1>{children}</h1>\r\n        </div>\r\n        <div>\r\n            <CurrencySelect />\r\n        </div>\r\n    </HeaderContainer>\r\n)\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n    color: #797e8c;\r\n    font-size: 1em;\r\n    text-align: center;\r\n    font-style: italic;\r\n    :before {\r\n        content: 'Last updated: ';\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n    width:100%;\r\n    margin: 1em 0;\r\n    table {\r\n        margin:auto;\r\n    }\r\n`;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CryptoTable from '../controls/CryptoTable';\r\nimport Header from '../components/Header';\r\nimport LastUpdated from '../components/LastUpdated';\r\nimport PageContentWrapper from '../components/PageContentWrapper';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.cryptocurrencies.loading,\r\n    currency: state.cryptocurrencies.currency,\r\n    data: state.cryptocurrencies.data,\r\n    lastUpdated: state.cryptocurrencies.lastUpdated\r\n})\r\n\r\n/**\r\n * Displays an overview of all cryptocurrencies in a list\r\n */\r\nconst DashboardPage = ({loading, currency, data, lastUpdated}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Header>Cryptocurrency Dashboard</Header>\r\n            <LastUpdated>{`${lastUpdated}`}</LastUpdated>\r\n            <PageContentWrapper>\r\n                <CryptoTable loading={loading} currency={currency} data={data} />\r\n            </PageContentWrapper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(DashboardPage);","import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n/**\r\n * Displays a name and value pair.\r\n */\r\nconst Statistic = ({name, children, className}) => (\r\n    <div className={className}>\r\n        <h4>{name}</h4>\r\n        <p>{\r\n            children ? children : 'Not available'\r\n        }</p>\r\n    </div>\r\n)\r\n\r\nexport default styled(Statistic)`\r\n    background-color: #30384d;\r\n    margin: 0.25em;\r\n    padding: 0.05em 0.75em;\r\n    width: 10em;\r\n    border-radius: 4px;\r\n    font-size: 1.25em;\r\n    line-height: 1.5em;\r\n\r\n    h4 {\r\n        color: #797e8c;\r\n        line-height: 1em;\r\n        text-transform: uppercase;\r\n        font-style: italic;\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Rank = ({value, className}) => (\r\n    <div className={className}>\r\n        <div>\r\n            {value}\r\n        </div>\r\n        <span>\r\n        Rank\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default styled(Rank)`\r\n    text-align: center;\r\n    display: inline-block;\r\n    font-size: 1.25em;\r\n\r\n    div {\r\n        display: inline-block;\r\n        width: 5em;\r\n        height: 5em;\r\n        line-height: 5em;\r\n        text-align: center;\r\n        border: 8px solid;\r\n        border-radius: 100em;\r\n        border-color: #2e344e;\r\n    }\r\n    span {\r\n        display: block;\r\n        text-transform: uppercase;\r\n        font-style: italic;\r\n        padding: 0.5em;\r\n    }\r\n`;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    formatCurrency,\r\n    formatNumber\r\n} from '../../functions/Formatters';\r\n\r\nimport StatisticList from '../components/Statistics/StatisticList';\r\nimport Statistic from '../components/Statistics/Statistic';\r\nimport Rank from '../components/Rank';\r\nimport LastUpdated from '../components/LastUpdated';\r\nimport PageContentWrapper from '../components/PageContentWrapper';\r\n\r\nimport Header from '../components/Header';\r\nimport LoadingSpinner from '../controls/LoadingSpinner';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const nameFromParams = ownProps.match.params.name;\r\n\r\n    if (state.cryptocurrencies.loading) return {\r\n        loading: true,\r\n        name: nameFromParams\r\n    };\r\n\r\n    const currency = state.cryptocurrencies.currency.toLowerCase();\r\n\r\n    const data = state.cryptocurrencies.data.find(o => o.name === nameFromParams);\r\n    if (!data) return {\r\n        loading: false,\r\n        found: false,\r\n        name: nameFromParams\r\n    }\r\n\r\n    return {\r\n        loading: false,\r\n        found: true,\r\n        name: data.name,\r\n        rank: data.rank,\r\n        marketCap: data[`market_cap_${currency}`],\r\n        circulatingSupply: data.available_supply,\r\n        volume24h: data[`24h_volume_${currency}`],\r\n        totalSupply: data.total_supply,\r\n        lastUpdated: state.cryptocurrencies.lastUpdated\r\n    };\r\n}\r\n\r\n/**\r\n * Displays additional information about a cryptocurrency\r\n */\r\nconst CurrencyProfilePage = (props) => {\r\n    const {loading, found, name} = props;\r\n    if (loading) {\r\n        return (\r\n            <React.Fragment>\r\n                <Header backButton>{name}</Header>\r\n                <LoadingSpinner />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    if (!found) {\r\n        return (\r\n            <React.Fragment>\r\n                <Header backButton>{name}</Header>\r\n                Cryptocurrency \"{name}\" not found\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    const {currency, rank, marketCap, circulatingSupply, volume24h, totalSupply, lastUpdated} = props;\r\n    console.log(lastUpdated);\r\n    return (\r\n        <div>\r\n            <Header backButton>{name}</Header>\r\n            <LastUpdated>{`${lastUpdated}`}</LastUpdated>\r\n            <PageContentWrapper>\r\n                <GridLayout>\r\n                    <LeftColumn>\r\n                        <Rank value={rank}/>\r\n                    </LeftColumn>\r\n                    <RightColumn>\r\n                        <StatisticList>\r\n                            <Statistic name='Market Cap'>{formatCurrency(marketCap, 0, currency)}</Statistic>\r\n                            <Statistic name='Circulating Supply'>{formatNumber(circulatingSupply, 0)}</Statistic>\r\n                            <Statistic name='24H Volume'>{formatNumber(volume24h, 0)}</Statistic>\r\n                            <Statistic name='Total Supply'>{formatNumber(totalSupply, 0)}</Statistic>\r\n                        </StatisticList>\r\n                    </RightColumn>\r\n                </GridLayout>\r\n            </PageContentWrapper>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst GridLayout = styled.div`\r\n    margin: auto;\r\n    margin-top: 1em;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst LeftColumn = styled.div`\r\n    width:20%;\r\n    max-width: 200px;\r\n    min-width: 150px;\r\n    text-align: center;\r\n    margin-top: 5em;\r\n`;\r\n\r\nconst RightColumn = styled.div`\r\n    width:60%;\r\n`;\r\n\r\nexport default connect(mapStateToProps)(CurrencyProfilePage);","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        font-family: 'Lato', sans-serif;\r\n        font-size: 1.1em;\r\n        line-height: 1.15em;\r\n        background-color: #262738;\r\n        color: #e7e9ec;\r\n    };\r\n\r\n    a {\r\n        color: #e7e9ec;\r\n    }\r\n    a:visited {\r\n        color: #e7e9ec;\r\n    }\r\n    a:active {\r\n        color: #e7e9ec;\r\n    }\r\n    a:hover {\r\n        color: #e7e9ec;\r\n    }\r\n`;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\n\r\nimport { registerRefreshInterval, clearRefreshInterval } from './redux/actions/idsActions';\r\nimport { fetchCryptocurrencies } from './redux/actions/cryptocurrenciesActions';\r\nimport DashboardPage from './components/pages/DashboardPage';\r\nimport CurrencyProfilePage from './components/pages/CurrencyProfilePage';\r\n\r\n// import './App.css';\r\nimport GlobalStyle from './GlobalStyle';\r\n\r\nconst mapStateToProps = ({intervalId}) => ({\r\n  intervalId\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n    onRegisterRefreshInterval: (intervalId) => (\r\n      registerRefreshInterval(intervalId)\r\n    ),\r\n    onClearRefreshInterval:\r\n      ()=>dispatch(clearRefreshInterval),\r\n    onFetchCryptocurrencies:\r\n      ()=>dispatch(fetchCryptocurrencies())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentWillMount() {\r\n    // Fetch cryptocurrency data and refetch on an interval\r\n    const { intervalId,\r\n      onFetchCryptocurrencies,\r\n      onRegisterRefreshInterval\r\n    } = this.props;\r\n\r\n    // Prevent multiple setInterval calls\r\n    if (!intervalId) {\r\n      onFetchCryptocurrencies();\r\n      const intervalId = setInterval(onFetchCryptocurrencies, 60 * 1000);\r\n      onRegisterRefreshInterval(intervalId);\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    const { intervalId } = this.props;\r\n    if (intervalId) {\r\n      clearInterval(intervalId);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <GlobalStyle />\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Switch>\r\n            <Route exact path='/' component={DashboardPage} />\r\n            <Route path='/:name' component={CurrencyProfilePage} />\r\n          </Switch>\r\n        </Router>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n ","import {\r\n    FETCH_CRYPTOCURRENCIES,\r\n    FETCH_CRYPTOCURRENCIES_COMPLETE,\r\n    \r\n    CHANGE_CURRENCY\r\n} from '../actions/cryptocurrenciesActions';\r\n\r\nconst defaultState = {currency: 'USD'};\r\n\r\n/**\r\n * For actions relating to fetching cryptocurrency data\r\n */\r\nconst cryptocurrencies = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case FETCH_CRYPTOCURRENCIES:\r\n            return { ...state, loading: true };\r\n\r\n        case FETCH_CRYPTOCURRENCIES_COMPLETE:\r\n            const data = action.result;\r\n            const {lastUpdated} = action;\r\n            return {\r\n                ...state,\r\n                data,\r\n                lastUpdated,\r\n                loading: false\r\n            };\r\n\r\n        case CHANGE_CURRENCY: \r\n            return {\r\n                ...state,\r\n                currency: action.newCurrency,\r\n                loading: true\r\n            };\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default cryptocurrencies;","import {\r\n    REGISTER_REFRESH_INTERVAL,\r\n    CLEAR_REFRESH_INTERVAL\r\n} from '../actions/idsActions';\r\n\r\nconst defaultState = {};\r\n\r\n/**\r\n * For tracking the id of instances (such as a setInterval routine)\r\n */\r\nconst ids = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case REGISTER_REFRESH_INTERVAL:\r\n            return { ...state, intervalId: action.intervalId };\r\n\r\n        case CLEAR_REFRESH_INTERVAL:\r\n            return { ...state, intervalId: null };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default ids;","import { combineReducers } from \"redux\";\r\n\r\nimport cryptocurrencies from './cryptocurrencies';\r\nimport ids from './ids';\r\n\r\nexport default combineReducers({\r\n    cryptocurrencies,\r\n    ids,\r\n});","import { takeLatest, put, all, select } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    FETCH_CRYPTOCURRENCIES,\r\n    FETCH_CRYPTOCURRENCIES_COMPLETE,\r\n    CHANGE_CURRENCY\r\n} from '../actions/cryptocurrenciesActions';\r\n\r\nexport const getCurrency = (state) => state.cryptocurrencies.currency\r\n\r\nfunction* fetchCryptocurrencies() {\r\n    const currency = yield select(getCurrency);\r\n    \r\n    const url = `https://api.coinmarketcap.com/v1/ticker/?limit=10&convert=${currency}`;\r\n\r\n    const result = yield axios.get(url)\r\n        .then(\r\n            // Reduce to data\r\n            response => response.data\r\n        );\r\n    \r\n    const lastUpdated = new Date();\r\n\r\n    yield put({ type: FETCH_CRYPTOCURRENCIES_COMPLETE, result, lastUpdated });\r\n}\r\n\r\nfunction* fetchCryptoCurrencyWatcher() {\r\n    yield takeLatest(FETCH_CRYPTOCURRENCIES, fetchCryptocurrencies);\r\n}\r\nfunction* changeCurrencyWatcher() {\r\n    yield takeLatest(CHANGE_CURRENCY, fetchCryptocurrencies);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fetchCryptoCurrencyWatcher(),\r\n        changeCurrencyWatcher(),\r\n    ]);\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n/*\r\n    Add flags for Redux Devtools chrome extension when creating the store\r\n*/\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(sagaMiddleware)\r\n    )\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/puff.872883b6.svg\";"],"sourceRoot":""}